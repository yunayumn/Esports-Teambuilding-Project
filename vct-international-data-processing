# -*- coding: utf-8 -*-
"""VCT International 2024 Experiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f7HwEWe1C0-ep-joz90H_PCHdaWhZTJp

#**Valorant Champions International Stage 2024**

Data collection: vct-international.json

Data sourced from: https://www.kaggle.com/datasets/sauurabhkr/valorant-champions-tour-2024/data

Processed by Yuna/Pepo.

#**Load Data**
"""

# prompt: install pandas, numpy, matplotlib, seaborn

!pip install pandas numpy matplotlib seaborn

# Import Package

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load Data

vct_data = pd.read_json('/content/vct-international.json')
vct_data.head(10)

"""#**Data Information**"""

# Data Summary

vct_data.describe()

# Data Type & Missing Values

vct_data.info()
vct_data.isnull().sum()

"""#**Data Cleanup**

Change all player statistics data type that returns object into float64.
"""

# Data Framing

df = pd.read_json('/content/vct-international.json')
df.head()

df.columns

# Splitting player statistics

from pandas import json_normalize
import json

with open('/content/vct-international.json') as file:
#    data = json.load('/content/vct-international.json')
     data = json.load(file)

df = pd.json_normalize(data)

df

df.columns

col_names = ['playerName', 'team', 'rating', 'region', 'agent', 'playerCategory',
       'average_combat_score', 'kill_death_ratio',
       'kill_assists_survived_traded',
       'average_damage_per_round',
       'kills_per_round',
       'assists_per_round',
       'first_kills_per_round',
       'first_deaths_per_round',
       'headshot_percentage',
       'clutch_success_percentage']

df.columns = col_names

df.columns

df.info()

# Take percentage columns and change it to float

percent_cols = ['kill_assists_survived_traded','headshot_percentage','clutch_success_percentage']
def remove_percentage_sign(x):
  return float(x.strip('%')) / 100 if isinstance(x,str) else x

df.replace("", np.nan, inplace=True)
for col in percent_cols:
  df[col] = df[col].apply(remove_percentage_sign)

df.head()

# Percentage (%) sign from KAST, HS%, and Clutch% removed!

df.info()

# Take numeric columns and change it to float

num_cols = ['rating','average_combat_score','kill_death_ratio','average_damage_per_round','kills_per_round','assists_per_round','first_kills_per_round','first_deaths_per_round']
for col in num_cols:
  df[col] = df[col].astype(float)

df.info()

# Data type for ACS, KD Ratio, AVG DMG/Round, K/R, A/R, FK/R, FD/R obtained!

"""#**Exploratory Data Analysis (EDA)**"""

# Data summary for VCT International 2024

df.describe()

df.describe(include='object')

# Counting players from each region

df['region'].value_counts()

# Counting agent pool played by players

df['agent'].value_counts()

"""#**Data Cleanup V2**"""

# Splitting agents from within agent pools data

exploded_agents = df['agent'].explode()
exploded_agents.value_counts()

# Handle missing values

df.isna().sum()

# Start checking datas from the highest amount of missing values

df[df['rating'].isna()]

df[df['kill_assists_survived_traded'].isna()]

df[df['headshot_percentage'].isna()]

df[df['clutch_success_percentage'].isna()]

cols_to_plot = ['rating','kill_assists_survived_traded','headshot_percentage','clutch_success_percentage']

plt.figure(figsize=(14, 6))
for col in cols_to_plot:
    sns.histplot(df[col], kde=True, label=col, bins=10)

# Adding legend
plt.legend(title='Columns')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Distribution of Selected Columns')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Fill out missing values

df[["rating", "kill_assists_survived_traded", "headshot_percentage","clutch_success_percentage"]] = df[["rating", "kill_assists_survived_traded", "headshot_percentage","clutch_success_percentage"]].fillna(df[["rating", "kill_assists_survived_traded", "headshot_percentage","clutch_success_percentage"]].mean())

df.info()

df[["first_kills_per_round","first_deaths_per_round"]] = df[["first_kills_per_round","first_deaths_per_round"]].fillna(df[["first_kills_per_round","first_deaths_per_round"]].median())

# Check for any more missing values left

df.info()

df[["average_damage_per_round"]] = df[["average_damage_per_round"]].fillna(df[["average_damage_per_round"]].mean())

df.info()

"""#**Data Visualization**"""

# Player distribution by region

from matplotlib import pyplot as plt
import seaborn as sns
sns.countplot(x='region', data=df)
plt.title('Player Distribution based on Region')
plt.show()

# Player distribution based on rating
sns.histplot(df['rating'], bins=20, kde=True)
plt.title('Distribution of Player Ratings')
plt.show()

# Player distribution based on average combat score
sns.histplot(df['average_combat_score'])
plt.title('Player Count based on Average Combat Score')
plt.show()

# Scatter plot: Rating vs. Average Combat Score
sns.scatterplot(x='rating', y='average_combat_score', data=df, hue='region')
plt.title('Rating vs. Average Combat Score')
plt.show()

# Grouped bar chart: Average Rating by Region
region_rating = df.groupby('region')['rating'].mean().reset_index()
sns.barplot(x='region', y='rating', data=region_rating)
plt.title('Average Rating by Region')
plt.show()

# Most popular agents
agent_counts = df['agent'].explode().value_counts()
sns.barplot(x=agent_counts.values, y=agent_counts.index)
plt.title('Most Popular Agents')
plt.xticks(rotation=90)
plt.show()

# Average rating by team
team_rating = df.groupby('team')['rating'].mean().reset_index()
team_rating = team_rating.sort_values(by='rating', ascending=False)
plt.figure(figsize=(10, 12))
sns.barplot(x='rating', y='team', data=team_rating)
plt.title('Average Rating by Team')
plt.xticks(rotation=90)
plt.show()

"""#**Top Players Analysis**"""

df.head()

print(df['rating'].describe())
print(df['average_combat_score'].describe())
print(df['kill_assists_survived_traded'].describe())
print(df['first_kills_per_round'].describe())
print(df['headshot_percentage'].describe())
print(df['clutch_success_percentage'].describe())

# Player with the highest rating
df[df['rating'] == 1.19]

# Player with the highest ACS
df[df['average_combat_score'] == 260.9]

# Player with the highest KAST
df[df['kill_assists_survived_traded'] == 0.81]

# Player with the highest FK/round
df[df['first_kills_per_round'] == 0.23]

# Player with the highest HS%
df[df['headshot_percentage'] == 0.43]

# Player with the highest clutch success%
df[df['clutch_success_percentage'] == 0.39]

"""Top 10% players based on rating"""

rating_threshold = df['rating'].quantile(0.90)

top_10_rated = df[df['rating'] >= rating_threshold]

len(top_10_rated)

top_10_rated.describe()

top_10_rated['region'].value_counts()

top_10_exploded_agents = top_10_rated['agent'].explode()
top_10_exploded_agents.value_counts()
